/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.61).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Student;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-08-21T08:27:53.170218228Z[GMT]")
@Validated
public interface StudentsApi {

    @Operation(summary = "", description = "add new student", tags={ "students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "CREATED") })
    @RequestMapping(value = "/students",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> addStudent(@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent student", required=true, schema=@Schema()) @Valid @RequestBody Student body
);


    @Operation(summary = "", description = "delete student by id", tags={ "students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "NO CONTENT"),
        
        @ApiResponse(responseCode = "404", description = "NOT FOUND") })
    @RequestMapping(value = "/students/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<?> deleteStudentById(@Parameter(in = ParameterIn.PATH, description = "id", required=true, schema=@Schema()) @PathVariable("id") UUID id
);


    @Operation(summary = "", description = "get students list", tags={ "students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "204", description = "NO CONTENT") })
    @RequestMapping(value = "/students",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listStudents();


    @Operation(summary = "", description = "replace student", tags={ "students" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "404", description = "NOT FOUND") })
    @RequestMapping(value = "/students",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<?> replaceStudent(@Parameter(in = ParameterIn.DEFAULT, description = "replace an existent student", required=true, schema=@Schema()) @Valid @RequestBody Student body
);

}

